# Generated by Django 5.1.8 on 2025-05-11 16:40

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Auto-generated from email if not provided.', max_length=150, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the Django admin site. True for Tenant Owners.', verbose_name='staff status')),
                ('role', models.CharField(choices=[('tenant_owner', 'Tenant Owner'), ('tenant_member', 'Tenant Member')], help_text='Global role of the user (Owner or Member of a Tenant).', max_length=20, verbose_name='Global Role')),
                ('role_in_tenant', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Administrator'), ('operator', 'Operator')], help_text="User's specific role within their tenant.", max_length=20, verbose_name='Role in Tenant')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('tenant', models.ForeignKey(help_text='The tenant this user belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='users_public', to='tenants.tenant')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'constraints': [models.UniqueConstraint(fields=('tenant', 'email'), name='unique_email_per_tenant_public'), models.UniqueConstraint(fields=('tenant', 'username'), name='unique_username_per_tenant_public')],
            },
        ),
    ]
